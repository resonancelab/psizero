name: Deploy to Kubernetes

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run tests
      run: |
        cd api
        go test ./... -v -coverprofile=coverage.out
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./api/coverage.out

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Deploy to staging
      run: |
        # Update image tag in k8s manifests
        sed -i 's|resonet/resonet:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}|g' k8s/deployment.yaml

        # Deploy to Kubernetes
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/config.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/pvc.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/hpa.yaml

        # Wait for rollout to complete
        kubectl rollout status deployment/resonet-app -n resonet --timeout=600s

        # Run post-deployment tests
        kubectl run post-deploy-test --image=curlimages/curl --rm -i --restart=Never -- curl -f http://resonet-app/health

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/production'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Deploy to production
      run: |
        # Update image tag in k8s manifests
        sed -i 's|resonet/resonet:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production-${{ github.sha }}|g' k8s/deployment.yaml

        # Deploy to Kubernetes
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/config.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/pvc.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/hpa.yaml

        # Wait for rollout to complete
        kubectl rollout status deployment/resonet-app -n resonet --timeout=600s

        # Run production smoke tests
        kubectl run smoke-test --image=curlimages/curl --rm -i --restart=Never -- curl -f https://api.resonet.io/health

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'image'
        scan-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Run performance tests
      run: |
        # Install k6
        curl https://github.com/grafana/k6/releases/download/v0.42.0/k6-v0.42.0-linux-amd64.tar.gz -L | tar xvz
        sudo mv k6-v0.42.0-linux-amd64/k6 /usr/local/bin/

        # Run performance tests against staging
        k6 run --out json=results.json scripts/performance-test.js

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: results.json

  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production')
    steps:
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ github.ref == 'refs/heads/production' && secrets.KUBE_CONFIG_PRODUCTION || secrets.KUBE_CONFIG_STAGING }}

    - name: Rollback deployment
      run: |
        # Rollback to previous version
        kubectl rollout undo deployment/resonet-app -n resonet

        # Wait for rollback to complete
        kubectl rollout status deployment/resonet-app -n resonet --timeout=300s